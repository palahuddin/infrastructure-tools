#!/bin/bash

usage="
infrastr Script, Personal Infrastructure Setup Purpose For Common Tools

Usage:
   infrastr -c <command> -s <service>

Usage multiple install 'pick' Service:
   infrastr -c  <command> -s pick <service name[1]> <service name[2]> <service name[3]> ...

Options:
   -c <command>
   -s <service name>

Available commands: 
   install  <install service>
   setup    <setup service>

Available 'install' services:
   all            Setup All Services
   golang         Installing golang 
   mc             Installing minio client 
   java           Installing java 
   nodejs         Installing nodejs 
   pm2            Installing pm2 
   docker         Installing docker 
   kubectl        Installing kubectl 
   helm           Installing Helm 
   compose        Installing docker compose 
   ansible        Installing ansible 
   terraform      Installing terraform 
   rke2           Setup RKE2 Kubernetes CLuster


Available 'setup' services:
   nginx          Deploy nginx and certbot
   harbor         Opensource container registry
   minio          Opensource object storage
   kind           Local Kubernetes Cluster Development 
   
"

if [ "$1" == "--help" ] || [ -z $1 ]; then
    echo "$usage"
    exit 0
fi

while getopts ":c:s:" opt; do
  case $opt in
    c) command="$OPTARG"
    ;;
    s) service="$OPTARG"
    ;;
    *) echo "Invalid option -$OPTARG" >&2
    echo "$usage"
    exit 0
    ;;
  esac
done


if [ "$command" = "install" ]; then
   case $service in
    all)
        DEB=`cat /etc/os-release |grep -ohE 'ubuntu|debian' |head -1`
        if [ $DEB ];then
          apt update -y 
        else
          yum update -y 
          yum install epel-release -y
        fi
         all=( java golang nodejs pm2 docker kubectl compose helm ansible terraform rke2 )
         for s in ${all[@]}
         do 
               echo `printf "\e[1;34m[INFO]......[INSTALLING $s]\e[0m"`
               echo " "
               echo " "
               bash infrastr -c install -s $s
               echo " "
               echo " "
               echo `printf "\e[1;32m[INFO]......[INSTALLING $s DONE!]\e[0m"`
               echo " "
               echo " "
         done
    ;;
    pick)
        DEB=`cat /etc/os-release |grep -ohE 'ubuntu|debian' |head -1`
        if [ $DEB ];then
          apt update -y 
        else
          yum update -y 
          yum install epel-release -y
        fi
         PICKS=`echo "$@" | sed 's/-c install -s pick //g'`
         for s in ${PICKS[@]}
         do 
            if [ $s = "pick" ];then
               echo " "
               echo " 'pick' is not service, please see [ $0 --help" ]
               echo " "
               exit 0
            fi
               echo `printf "\e[1;34m[INFO]......[INSTALLING $s]\e[0m"`
               echo " "
               echo " "
               bash infrastr -c install -s $s
               echo " "
               echo " "
               echo `printf "\e[1;32m[INFO]......[INSTALLING $s DONE!]\e[0m"`
               echo " "
               echo " "
         done
    ;;
    golang)
         DEB=`cat /etc/os-release |grep -ohE 'ubuntu|debian' |head -1`
         if [ $DEB ];then
          apt update -y && apt install wget -y
         else
          yum update -y && yum install wget -y
         fi
          wget https://golang.org/dl/go1.17.linux-amd64.tar.gz -O golang.tar.gz
          tar -C /usr/local -xvzf golang.tar.gz
          echo "export PATH=$PATH:/usr/local/go/bin" >> ~/.bashrc
          source ~/.bashrc
    ;;
    mc)
          mkdir -p ~/bin/
          sed -i '/~\/bin/d' ~/.bashrc
          echo "export PATH=\$PATH:~/bin/" >> ~/.bashrc
          source ~/.bashrc
          wget https://dl.min.io/client/mc/release/linux-amd64/mc -O ~/bin/mc
          chmod +x ~/bin/mc
    ;;    
    java)
         DEB=`cat /etc/os-release |grep -ohE 'ubuntu|debian' |head -1`
         if [ $DEB ];then
          apt update -y && apt install openjdk-8-jre-headless -y
         else
          yum update -y && yum install java-1.8.0-openjdk -y
         fi
    ;;    
    nodejs)
         DEB=`cat /etc/os-release |grep -ohE 'ubuntu|debian' |head -1`
         RPM=`cat /etc/os-release |grep -oh centos |head -1`
         if [ $DEB ];then
            curl -fsSL https://deb.nodesource.com/setup_lts.x | bash -
            apt-get install -y nodejs
         elif [ $RPM ];then
            curl -fsSL https://rpm.nodesource.com/setup_lts.x | bash -
            yum install -y nodejs gcc-c++ make
         else
            echo "OS not available on this script"
         fi
         exit 0
    ;;
    pm2)
         NPM=`npm |grep -oh npm |head -1`
         if [ "$NPM" != "npm" ];then
            bash $0 -c install -s nodejs
            npm install pm2@latest -g
         else
            npm install pm2@latest -g
         fi
    ;;       
    docker)
         DEB=`cat /etc/os-release |grep -ohE 'ubuntu|debian' |head -1`
         RPM=`cat /etc/os-release |grep -oh centos |head -1`
         if [ $DEB ];then
          rm -rf gpg
          apt-get remove docker docker-engine docker.io docker-ce docker-ce-cli containerd runc -y
          apt-get install \
               apt-transport-https \
               ca-certificates \
               curl \
               gnupg-agent \
               software-properties-common -y 

          wget https://download.docker.com/linux/ubuntu/gpg && apt-key add gpg

          add-apt-repository \
               "deb [arch=amd64] https://download.docker.com/linux/ubuntu \
               $(lsb_release -cs) \
               stable" -y
               apt-get update -y
               apt-get install -y \
               docker-ce=5:19.03.14~3-0~ubuntu-$(lsb_release -cs) \
               docker-ce-cli=5:19.03.14~3-0~ubuntu-$(lsb_release -cs) \
               containerd.io
         elif [ $RPM ];then
            yum install -y yum-utils
            yum-config-manager \
               --add-repo https://download.docker.com/linux/centos/docker-ce.repo
            yum install docker-ce docker-ce-cli containerd.io --allowerasing -y 
            systemctl start docker && systemctl enable docker
         else
            echo "OS not available on this script"
         fi
         exit 0
    ;;
    kubectl)
         curl -LO "https://dl.k8s.io/release/$(curl -L -s https://dl.k8s.io/release/stable.txt)/bin/linux/amd64/kubectl"
         mkdir -p ~/bin/
         sed -i '/~\/bin/d' ~/.bashrc
         echo "export PATH=\$PATH:~/bin/" >> ~/.bashrc
         chmod +x kubectl && mv kubectl ~/bin/
         source ~/.bashrc
    ;;
    helm)
         curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3
         chmod 700 get_helm.sh && bash get_helm.sh
         rm -f get_helm.sh
    ;;
    compose)
         curl -L "https://github.com/docker/compose/releases/download/1.29.2/docker-compose-$(uname -s)-$(uname -m)" -o /usr/local/bin/docker-compose
         chmod +x /usr/local/bin/docker-compose
         ln -s /usr/local/bin/docker-compose /usr/bin/docker-compose
    ;;
    ansible)
        DEB=`cat /etc/os-release |grep -ohE 'ubuntu|debian' |head -1`
        if [ $DEB ];then
          apt update -y && apt-get install gnupg2 python3-pip -y
        else
          yum install epel-release -y 
          yum update -y && yum install python3-pip -y python3-setuptools     
          yes | pip3 install --upgrade pip
          yes | pip3 install setuptools-rust
          CRYPTOGRAPHY_DONT_BUILD_RUST=1   
        fi
         yes | pip3 install ansible
    ;;
    terraform)
        DEB=`cat /etc/os-release |grep -ohE 'ubuntu|debian' |head -1`
        if [ $DEB ];then
          apt update -y && apt-get install wget zip -y
        else
          yum update -y && yum install wget zip unzip -y
        fi  
         wget https://releases.hashicorp.com/terraform/1.0.5/terraform_1.0.5_linux_amd64.zip
         unzip terraform_1.0.5_linux_amd64.zip && mv terraform /usr/bin/
         chmod +x /usr/bin/terraform
    ;;
    rke2)
        DEB=`cat /etc/os-release |grep -ohE 'ubuntu|debian' |head -1`
        if [ $DEB ];then
          apt update -y && apt-get install jq -y
        else
          yum install epel-release -y
          yum install jq -y
        fi
          curl -sfL https://get.rke2.io | INSTALL_RKE2_VERSION=v1.20.9+rke2r2 sh -
          systemctl start rke2-server
          until [ "$(curl -ks https://localhost:6443 |jq -r '.code')" = "401" ]
          do
               echo `printf "\e[1;31m[INFO]......[Waiting for KUBE API SERVER IS UP]\e[0m"`
               sleep 10
          done
               echo " "
               echo " "
               echo `printf "\e[1;33m[INFO]......[KUBE API SERVER IS UP]\e[0m"`
               echo " "
               echo " "

          sed -i '/KUBECONFIG/d' ~/.bashrc
          echo "export KUBECONFIG=/etc/rancher/rke2/rke2.yaml" >> ~/.bashrc
    ;;                    
    *)
         echo "$usage"
    ;;            
   esac

elif [ $command = "setup" ];then
   case $service in
    nginx)
      DEB=`cat /etc/os-release |grep -ohE 'ubuntu|debian' |head -1`
      if [ $DEB ];then
         apt update -y && apt-get install nginx snapd -y
         snap install core; sudo snap refresh core
         snap install --classic certbot
         ln -s /snap/bin/certbot /usr/bin/certbot
      else
         yum install epel-release -y
         yum install nginx snapd -y
         systemctl enable --now snapd.socket
         snap install core; sudo snap refresh core
         snap install --classic certbot
         ln -sfn /var/lib/snapd/snap /snap
      fi
      curl -o /etc/nginx/conf.d/sample.conf -s https://raw.githubusercontent.com/palahuddin/infrastructure-tools/master/src/nginx-sample-conf
      echo `printf "\e[1;34m## Installing Let's Encrypt SSL ##\e[0m"`
      echo " "
      echo `printf "\e[1;34mcertbot certonly --nginx -d web.example.com -d web.example.com\e[0m"`
      echo " "
    ;;
    harbor)
      DEB=`cat /etc/os-release |grep -ohE 'ubuntu|debian' |head -1`
      if [ $DEB ];then
         echo " "
         echo `printf "\e[1;32mOS Like=$DEB\e[0m"`
      else
         echo `printf "\e[1;31mOS Temporary Unavailable for this script, Only 'Debian|Ubuntu'\e[0m"`
         exit 1
      fi
    echo `printf "\e[1;34m[UPDATE INFORMATION REGISTRY CONFIGURATION]\e[0m"`
    echo " "
    read -p "Set Registry Hostname :  " hostname;
    read -p "Set Registry Login Password :  " password;
    read -p "Set Registry DB Password :  " dbpassword;
    DOCKER_CHECK=`docker version |grep -ohE docker |head -1`
    COMPOSE_CHECK=`docker-compose version |grep -ohE docker-compose |head -1`
    if [ "$DOCKER_CHECK" != "docker" ];then
      bash $0 -c install -s docker
    fi

    if [ "$COMPOSE_CHECK" != "docker-compose" ];then
      bash $0 -c install -s compose
    fi

    wget https://github.com/goharbor/harbor/releases/download/v2.3.2/harbor-offline-installer-v2.3.2.tgz -O harbor-offline-installer.tgz
    tar xzvf harbor-offline-installer.tgz && cd harbor
    curl -o harbor.yml -s https://raw.githubusercontent.com/palahuddin/infrastructure-tools/master/src/harbor-sample-yml
    sed -i "s/example.com/$hostname/g;s/secretpassworddb/$dbpassword/g;s/secretpassword/$password/g" harbor.yml
    bash install.sh

    ;;
    kind)
    echo `printf "\e[1;34m[UPDATE INFORMATION KIND CONFIGURATION]\e[0m"`
    echo " "
    read -p "Set Cluster Name (default: local):  " kind_cluster;
    read -p "Set KUBE API Listen IP (default: 0.0.0.0):  " listen;
    read -p "Set KUBE API Listen Port (default: 6443):  " port;
      kind_cluster=${kind_cluster:-local}
      listen=${listen:-0.0.0.0}
      port=${port:-6443}
    DOCKER_CHECK=`docker version |grep -ohE docker |head -1`
    COMPOSE_CHECK=`docker-compose version |grep -ohE docker-compose |head -1`
    if [ "$DOCKER_CHECK" != "docker" ];then
      bash $0 -c install -s docker
    fi
    curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.11.1/kind-linux-amd64
    curl -Lo ./config.yaml https://raw.githubusercontent.com/palahuddin/infrastructure-tools/master/src/kind-config-sample
    sed -i '/~\/bin/d' ~/.bashrc
    echo "export PATH=\$PATH:~/bin/" >> ~/.bashrc
    chmod +x kind && mv kind ~/bin/
    source ~/.bashrc
    sed "s/LIPADDR/$listen/;s/LPORT/$port/g" -i config.yaml
    kind create cluster --name $kind_cluster --config config.yaml
    ;;
    minio)
    echo " "
    echo `printf "\e[1;34m[UPDATE INFORMATION MINIO CONFIGURATION]\e[0m"`
    echo " "
    read -p "Set Minio User Key :  " userkey;
    read -p "Set Minio Secret Key :  " secretkey;

    DOCKER_CHECK=`docker version |grep -ohE docker |head -1`
    if [ "$DOCKER_CHECK" != "docker" ];then
      bash $0 -c install -s docker
    fi

    docker rm -f minio 
    mkdir -p /minio-storage
    docker run -d \
      -p 9000:9000 \
      -p 9001:9001 \
      --name minio \
      -v /minio-storage:/data \
      -e "MINIO_ROOT_USER=$userkey" \
      -e "MINIO_ROOT_PASSWORD=$secretkey" \
      minio/minio server /data --console-address ":9001"
    sleep 10
    echo " "
    echo " "
    echo `printf "\e[1;32m====================================\e[0m"`
    echo `printf "\e[1;32m[INFORMATION OF MINIO CONFIGURATION]\e[0m"`
    echo `printf "\e[1;32m====================================\e[0m"`
    docker logs minio
    echo `printf "\e[1;32mMinio User Key: $userkey\e[0m"`
    echo `printf "\e[1;32mMinio Secret Key: $secretkey\e[0m"`
    echo " "
    echo " "
    
    ;;
    *)
      echo "$USAGE"
      exit 0
    ;;        
    esac
elif [ $command = "clean" ];then
   case $service in
    nginx)
      DEB=`cat /etc/os-release |grep -ohE 'ubuntu|debian' |head -1`
      RPM=`cat /etc/os-release |grep -oh centos |head -1`
      if [ $DEB ];then
         apt autoremove nginx -y
      else 
         yum remove -y nginx
      fi      
      snap remove certbot
    ;;   
    harbor)
      cd ~/harbor && docker-compose down
    ;;
    minio)
      docker rm -f minio
    ;;    
    docker)
      DEB=`cat /etc/os-release |grep -ohE 'ubuntu|debian' |head -1`
      RPM=`cat /etc/os-release |grep -oh centos |head -1`
      if [ $DEB ];then
         rm -rf gpg
         apt-get remove docker docker-engine docker.io docker-ce docker-ce-cli containerd runc -y   
      fi
    ;;  
    *)
      echo "$USAGE"
    ;;    
   esac
else 
   echo "$USAGE"
   exit 0
fi

